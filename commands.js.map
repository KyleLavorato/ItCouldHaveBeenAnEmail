{"version":3,"file":"commands.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js","webpack://office-addin-taskpane-js/./src/commands/salary.js","webpack://office-addin-taskpane-js/webpack/bootstrap"],"sourcesContent":["const { salaryData } = require('./salary');\n\nlet mailboxItem;\n\n// To check if the manifest.xml has any errors run:\n// `npm run validate`\n\n// To test the add-in, run `npm run dev-server` and then side-load the add-in in Outlook. Each time this file is saved, it will recompile and make the new changes available in the add-in.\n// To enable developer extras in Outlook, run the following command in the terminal. This will open a dev tools window to see the console logs when the add-in is running.\n// `defaults write com.microsoft.Outlook OfficeWebAddinDeveloperExtras -bool true`\n\n// To disable the developer extras, run the following command in the terminal.\n// `defaults delete com.microsoft.Outlook OfficeWebAddinDeveloperExtras`\n\nOffice.onReady(function () {\n        mailboxItem = Office.context.mailbox.item;\n    }\n);\n\nfunction insertPoints(event) {\n    // Get HTML body from the client.\n    mailboxItem.body.getAsync(\"html\", { asyncContext: event }, function (getBodyResult) {\n        if (mailboxItem.itemType === Office.MailboxEnums.ItemType.Appointment) {\n            getTotalDuration(function (duration) {\n                console.log(\"Meeting duration: \" + duration + \" hours\");\n                getAttendees(function (attendees) {\n                    if (attendees) {\n                        resolveJobTitles(attendees, function (jobTitles) {\n                            if (getBodyResult.status === Office.AsyncResultStatus.Succeeded) {\n                                const totalCost = calculateMeetingCost(jobTitles, duration);\n                                displayInfobar(`Total cost of the meeting: $${totalCost}`);\n                                // For Debugging\n                                // const emailsWithJobTitles = jobTitles.map(item => `${item.email} (${item.jobTitle})`).join(\", \");\n                                // updateBody(getBodyResult.asyncContext, getBodyResult.value, emailsWithJobTitles);\n                                // End Debugging\n                                getBodyResult.asyncContext.completed({ allowEvent: false }); // This will end the add-in run\n                            } else {\n                                console.error(\"Failed to get HTML body.\");\n                                getBodyResult.asyncContext.completed({ allowEvent: false });\n                            }\n                        });\n                    } else {\n                        console.error(\"Failed to get attendees.\");\n                        getBodyResult.asyncContext.completed({ allowEvent: false });\n                    }\n                });\n            });\n        }\n    });\n}\n\nfunction getAttendees(callback) {\n    let attendees = [];\n\n    mailboxItem.requiredAttendees.getAsync(function (requiredResult) {\n        if (requiredResult.status === Office.AsyncResultStatus.Succeeded) {\n            attendees = requiredResult.value.map(attendee => attendee.emailAddress);\n\n            mailboxItem.optionalAttendees.getAsync(function (optionalResult) {\n                if (optionalResult.status === Office.AsyncResultStatus.Succeeded) {\n                    attendees = attendees.concat(optionalResult.value.map(attendee => attendee.emailAddress));\n                    \n                    // Expand distribution lists\n                    expandDistributionLists(attendees, callback);\n                } else {\n                    console.error(\"Failed to get optional attendees.\");\n                    callback(null);\n                }\n            });\n        } else {\n            console.error(\"Failed to get required attendees.\");\n            callback(null);\n        }\n    });\n}\n\nfunction expandDistributionLists(attendees, callback) {\n    let expandedAttendees = [];\n    let pendingRequests = attendees.length;\n\n    attendees.forEach(email => {\n        // DLs will not have an underscore as part of the email\n        // If the email contains an underscore, it is not a DL\n        if (email.includes(\"_\")) {\n            // Do not add duplicate entries\n            if (!expandedAttendees.includes(email)) {\n                expandedAttendees.push(email);\n            }\n            pendingRequests--;\n            if (pendingRequests === 0) {\n                callback(expandedAttendees);\n            }\n            return;\n        }\n        Office.context.mailbox.makeEwsRequestAsync(\n            `<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n                <soap:Header>\n                    <t:RequestServerVersion Version=\"Exchange2013\" />\n                </soap:Header>\n                <soap:Body>\n                    <m:ExpandDL>\n                        <m:Mailbox>\n                            <t:EmailAddress>${email}</t:EmailAddress>\n                        </m:Mailbox>\n                    </m:ExpandDL>\n                </soap:Body>\n            </soap:Envelope>`,\n            function (asyncResult) {\n                if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n                    const parser = new DOMParser();\n                    const xmlDoc = parser.parseFromString(asyncResult.value, \"text/xml\");\n                    const members = xmlDoc.getElementsByTagName(\"t:Mailbox\");\n\n                    // Not a distribution list if there are no members\n                    if (members.length === 0) {\n                        // Do not add duplicate entries\n                        if (!expandedAttendees.includes(email)) {\n                            expandedAttendees.push(email);\n                        }\n                    } else {\n                        for (let i = 0; i < members.length; i++) {\n                            const memberEmail = members[i].getElementsByTagName(\"t:EmailAddress\")[0].textContent;\n                            // Do not add duplicate entries\n                            if (!expandedAttendees.includes(memberEmail)) {\n                                expandedAttendees.push(memberEmail);\n                            }\n                        }\n                    }\n                } else {\n                    console.error(\"Failed to expand distribution list: \" + email);\n                    expandedAttendees.push(email); // If expansion fails, keep the original email\n                }\n\n                pendingRequests--;\n                if (pendingRequests === 0) {\n                    console.log(expandedAttendees)\n                    callback(expandedAttendees);\n                }\n            }\n        );\n    });\n}\n\nfunction resolveJobTitles(emails, callback) {\n    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\n        if (result.status === Office.AsyncResultStatus.Succeeded) {\n            let jobTitles = [];\n            let pendingRequests = emails.length;\n\n            emails.forEach(email => {\n                Office.context.mailbox.makeEwsRequestAsync(\n                    `<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\" xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n                        <soap:Header>\n                            <t:RequestServerVersion Version=\"Exchange2013\" />\n                        </soap:Header>\n                        <soap:Body>\n                            <m:ResolveNames ReturnFullContactData=\"true\" SearchScope=\"ActiveDirectory\">\n                                <m:UnresolvedEntry>${email}</m:UnresolvedEntry>\n                            </m:ResolveNames>\n                        </soap:Body>\n                    </soap:Envelope>`,\n                    function (asyncResult) {\n                        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n                            const parser = new DOMParser();\n                            const xmlDoc = parser.parseFromString(asyncResult.value, \"text/xml\");\n                            const jobTitle = xmlDoc.getElementsByTagName(\"t:JobTitle\")[0]?.textContent;\n\n                            if (jobTitle) {\n                                jobTitles.push({ email, jobTitle });\n                            } else {\n                                jobTitles.push({ email, jobTitle: \"Not found\" });\n                            }\n                        } else {\n                            jobTitles.push({ email, jobTitle: \"Request failed\" });\n                        }\n\n                        pendingRequests--;\n                        if (pendingRequests === 0) {\n                            callback(jobTitles);\n                        }\n                    }\n                );\n            });\n        } else {\n            console.error(\"Failed to get callback token:\" + result.error.code + \" \" + result.error.name + \" \" + result.error.message);\n            callback(null);\n        }\n    });\n}\n\nfunction displayInfobar(message) {\n    const key = \"meetingcost\"\n    console.log(\"Displaying infobar: \" + message);\n    Office.context.mailbox.item.notificationMessages.addAsync(key, {\n        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n        message: message,\n        icon: \"Icon.16x16\",\n        persistent: true\n    }, function (result) {\n        if (result.status === Office.AsyncResultStatus.Failed) {\n            // We can only use `addAsync` once per key, so we need to replace the infobar if it already exists.\n            // The most likely reason for failing to add is this, so we will assume that is always the case\n            console.error(\"Failed to add infobar, try to replace instead: \" + result.error.message);\n            Office.context.mailbox.item.notificationMessages.replaceAsync(key, {\n                type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n                message: message,\n                icon: \"Icon.16x16\",\n                persistent: true\n            }, function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    console.error(\"Failed to replace infobar: \" + result.error.message);\n                }\n            });\n        }\n    });\n\n}\n\nfunction getTotalDuration(callback) {\n    const start = mailboxItem.start;\n    const end = mailboxItem.end;\n\n    start.getAsync(function (startResult) {\n        if (startResult.status === Office.AsyncResultStatus.Succeeded) {\n            end.getAsync(function (endResult) {\n                if (endResult.status === Office.AsyncResultStatus.Succeeded) {\n                    const startTime = new Date(startResult.value);\n                    const endTime = new Date(endResult.value);\n                    const duration = (endTime - startTime) / (1000 * 60 * 60); // Convert milliseconds to hours\n                    callback(duration);\n                } else {\n                    console.error(\"Failed to get end time.\");\n                    callback(null);\n                }\n            });\n        } else {\n            console.error(\"Failed to get start time.\");\n            callback(null);\n        }\n    });\n}\n\nfunction calculateMeetingCost(jobTitles, duration) {\n    let totalCost = 0;\n\n    jobTitles.forEach(item => {\n        console.log(`Email: ${item.email}, Job Title: ${item.jobTitle}`);\n        console.log(salaryData);\n        console.log(`Salary: ${salaryData[item.jobTitle] || salaryData[\"Default\"]}`);\n        const salary = salaryData[item.jobTitle] || salaryData[\"Default\"];\n        const hourlyRate = salary / 1950; // Assuming 1950 working hours in a year (37.5 / week)\n        totalCost += hourlyRate * duration;\n    });\n\n    return totalCost.toFixed(2); // Return cost rounded to 2 decimal places\n}\n\n// Register the functions.\nOffice.actions.associate(\"insertPoints\", insertPoints);\nOffice.actions.associate(\"attendeeChanged\", attendeeChanged);\nOffice.actions.associate(\"durationChanged\", durationChanged);\n\nfunction attendeeChanged(event) {\n    console.log(`Event: ${event.type}`);\n    insertPoints(null);\n}\n\nfunction durationChanged(event) {\n    console.log(`Event: ${event.type}`);\n    insertPoints(null);\n}\n\n// Use this for debugging to display data in the message\nfunction updateBody(event, existingBody, annotation) {\n    // Append new body to the existing body.\n    mailboxItem.body.setAsync(existingBody + annotation,\n        { asyncContext: event, coercionType: \"html\" },\n        function (setBodyResult) {\n            if (setBodyResult.status !== Office.AsyncResultStatus.Succeeded) {\n                console.error(\"Failed to set HTML body.\");\n            }\n        }\n    );\n}\n","// Map of job titles and their corresponding yearly salaries.\n// The job title string must match the user's title exactly.\nconst salaryData = {\n    \"Software Developer Co-Op\": 62400,\n    \"Software Developer\": 69100,\n    \"Sr. Software Developer\": 86700,\n    \"Staff Software Developer\": 100900,\n    \"Sr. Staff Software Developer\": 121800,\n    \"Y Leader\": 142800,\n    \"Y Coach\": 180000,\n    \"Default\": 86700 // Default is the value of \"Sr. Software Developer\"\n};\n\nexports.salaryData = salaryData;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["mailboxItem","exports","salaryData","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","require","insertPoints","event","body","getAsync","asyncContext","getBodyResult","callback","start","end","itemType","Office","MailboxEnums","ItemType","Appointment","duration","attendees","console","log","emails","jobTitles","status","AsyncResultStatus","Succeeded","totalCost","forEach","item","concat","email","jobTitle","salary","toFixed","calculateMeetingCost","message","key","context","mailbox","notificationMessages","addAsync","type","ItemNotificationMessageType","InformationalMessage","icon","persistent","result","Failed","error","replaceAsync","completed","allowEvent","getCallbackTokenAsync","isRest","pendingRequests","length","makeEwsRequestAsync","asyncResult","_xmlDoc$getElementsBy","DOMParser","parseFromString","value","getElementsByTagName","textContent","push","code","name","requiredAttendees","requiredResult","map","attendee","emailAddress","optionalAttendees","optionalResult","expandedAttendees","includes","members","i","memberEmail","expandDistributionLists","startResult","endResult","startTime","Date","endTime","onReady","actions","associate"],"sourceRoot":""}